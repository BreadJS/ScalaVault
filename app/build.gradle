apply plugin: 'com.android.application'

android {
    compileSdkVersion 32
    defaultConfig {
        applicationId "io.scalaproject.vault"
        minSdkVersion 21
        targetSdkVersion 32
        versionCode 9
        versionName "1.0.8"

        testInstrumentationRunner 'androidx.test.runner.AndroidJUnitRunner'
        externalNativeBuild {
            cmake {
                cppFlags "-std=c++11"
                arguments '-DANDROID_STL=c++_shared'
            }
        }

        resConfigs "en", "fr", "de", "el", "eo", "es", "et", "hu", "it", "ja", "nb", "nl", "pt", "pt-rBR", "ro", "ru", "sk", "sr", "sv", "uk", "zh-rCN", "zh-rTW"
    }

    flavorDimensions 'type', 'net'
    productFlavors {
        mainnet {
            dimension 'net'
        }
        stagenet {
            dimension 'net'
            applicationIdSuffix '.stage'
            versionNameSuffix ' (stage)'
        }
        alpha {
            dimension 'type'
            applicationIdSuffix '.alpha'
            versionNameSuffix ' (alpha)'
        }
        prod {
            dimension 'type'
        }
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
        debug {
            applicationIdSuffix ".debug"
        }
    }

    externalNativeBuild {
        cmake {
            path "CMakeLists.txt"
        }
    }

    bundle {
        language {
            enableSplit = true
        }
        density {
            enableSplit = true
        }
        abi {
            enableSplit = true
        }
    }

    splits {
        abi {
            enable true
            reset()
            include 'armeabi-v7a', 'arm64-v8a', 'x86', 'x86_64'
            universalApk true
        }
    }

    // Map for the version code that gives each ABI a value.
    def abiCodes = ['armeabi-v7a': 1, 'arm64-v8a': 2, 'x86': 3, 'x86_64': 4]

    // Enumerate translated locales
    def availableLocales = ["en"]
    new File("app/src/main/res/").eachFileMatch(~/^values-.*/) { file ->
        def languageTag = file.name.substring(7).replace("-r", "-")
        availableLocales.add(languageTag)
    }

    // APKs for the same app that all have the same version information.
    android.applicationVariants.all { variant ->
        // Update string resource: available_locales
        variant.resValue("string", "available_locales", availableLocales.join(","))
        // Assigns a different version code for each output APK.
        variant.outputs.all {
            output ->
                def abiName = output.getFilter(com.android.build.OutputFile.ABI)
                output.versionCodeOverride = abiCodes.get(abiName, 0) + 10 * variant.versionCode
                //def flavor = output.getFilter(flavor)

                if (abiName == null) abiName = "universal"
                def v = "${variant.versionName}".replaceFirst(" '.*' ?", "")
                        .replace(".", "x")
                        .replace("(", "-")
                        .replace(")", "")
                outputFileName = "$rootProject.ext.apkName-" + v + "_" + abiName + ".apk"
        }
    }
}

dependencies {
    //noinspection GradleDependency
    implementation 'com.google.android.material:material:1.0.0' // keep version 1.0.0 as it fixes a bug with Material Button
    implementation "com.android.support:support-v4"
    implementation "com.android.support:recyclerview-v7"
    implementation 'androidx.cardview:cardview:1.0.0'
    implementation 'androidx.swiperefreshlayout:swiperefreshlayout:1.1.0'
    //noinspection GradleDependency
    implementation 'com.google.android.material:material:1.1.0'  // keep version 1.1.0 as it fixes a bug with Material Button
    //noinspection GradleDependency
    implementation 'androidx.appcompat:appcompat:1.1.0'  // keep version 1.1.0 as it fixes a bug with Material Button
    implementation 'androidx.legacy:legacy-support-v4:1.0.0'

    implementation 'me.dm7.barcodescanner:zxing:1.9.8'

    //noinspection GradleDependency
    implementation 'com.squareup.okhttp3:okhttp:3.0.1' // keep version 3.0.1 to avoid errors
    implementation "com.burgstaller:okhttp-digest:1.18"
    implementation "com.jakewharton.timber:timber:$rootProject.ext.timberVersion"

    implementation 'com.nulab-inc:zxcvbn:1.2.3'

    implementation 'dnsjava:dnsjava:2.1.8'
    implementation 'org.jitsi:dnssecjava:1.1.3'
    implementation 'org.slf4j:slf4j-nop:1.7.25'
    implementation 'com.github.brnunes:swipeablerecyclerview:1.0.2'

    testImplementation "junit:junit:$rootProject.ext.junitVersion"
    testImplementation "org.mockito:mockito-all:$rootProject.ext.mockitoVersion"
    testImplementation "com.squareup.okhttp3:mockwebserver:$rootProject.ext.okHttpVersion"
    testImplementation 'org.json:json:20180813'
    testImplementation 'net.jodah:concurrentunit:0.4.4'

    def acraVersion = '5.7.0'
    implementation "ch.acra:acra-core:$acraVersion"
    implementation "ch.acra:acra-mail:$acraVersion"

    implementation 'com.unstoppabledomains:resolution:3.0.0'
}
